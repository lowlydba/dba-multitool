---
#TODO:
# Add sample sp_doc output as artifact
# Add code coverage / sqlcover
# See if pester files can be consolidated
# Fix broken appveyor for older versions
# Add SQL 2017 to github runner - https://github.com/potatoqualitee/mssqlsuite/issues/16
# Break out tsqlt action as independent GHA

name: Integration (Win)
on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths-ignore:
      - .vscode/*
  pull_request:
    paths-ignore:
      - .vscode/*

  # Run CI once per day (at 06:00 UTC)
  schedule:
    - cron: "0 6 * * *"

# Cancel existing runs on new commits to a branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  SQLINSTANCE: "localhost"
  DATABASE: "tsqlt"
  INSTALLER_FILE: "install_dba-multitool.sql"
  NUGET_API: "http://www.nuget.org/api/v2"

jobs:
  integration:
    runs-on: ${{ matrix.os }}
    name: sqlserver-${{ matrix.sql_server }} x ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - windows-2022
        sql_server:
          - 2019

    steps:
      - name: Check out code
        uses: actions/checkout@v3.0.2
        with:
          path: ""

      - name: Install SQL Server
        uses: potatoqualitee/mssqlsuite@v1.4
        with:
          install: sqlengine
          sa-password: L0wlydb4

      - name: Install and cache PowerShell modules
        uses: potatoqualitee/psmodulecache@v4.5
        with:
          modules-to-cache: dbatools
          shell: powershell

      - name: Create database
        run: |
          $null = New-DbaDatabase -SqlInstance $Env:SQLINSTANCE -Database $Env:DATABASE

      - name: Install tSQLt
        uses: ./.github/actions/tsqlt
        with:
          sql-instance: ${{ env.SQLINSTANCE }}
          database: ${{ env.DATABASE }}
          version: "latest"

      - name: Create installer script
        run: |
          Get-ChildItem -Path ".\" -Filter "sp_*.sql" | Get-Content | Out-File $Env:INSTALLER_FILE -Encoding ascii

      - name: Install multitool
        run: |
          Invoke-DbaQuery -SqlInstance $Env:SQLINSTANCE -Database $Env:DATABASE -File $Env:INSTALLER_FILE

      - name: Run Pester tests with SQLCover
        uses: ./.github\actions\sqlcover
        with:
          sql-instance: ${{ env.SQLINSTANCE }}
          database: ${{ env.DATABASE }}

      # - name: Codecov Upload
      #   uses: codecov/codecov-action@v3.1.0
      #   with:
      #     fail_ci_if_error: false

      - name: Produce the coverage report
        uses: insightsengineering/coverage-action@v2
        with:
          path: "cobertura.xml"
          # Minimum total coverage, if you want to the
          # workflow to enforce it as a standard.
          # This has no effect if the `fail` arg is set to `false`.
          threshold: 80.123
          # Fail the workflow if the minimum code coverage
          # reuqirements are not satisfied.
          fail: false
          # Publish the rendered output as a PR comment
          publish: true
          # Create a coverage diff report.
          diff: true
          diff-branch: main
          # This is where the coverage reports for the
          # `diff-branch` are stored.
          # Branch is created if it doesn't already exist'.
          diff-storage: _xml_coverage_reports

      - name: Create HTML coverage artifact
        uses: actions/upload-artifact@v3
        with:
          name: html-coverage
          path: coverage.html
