---
name: Generate Files & Artifacts
on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths-ignore:
      - .vscode/*
  pull_request:
    paths-ignore:
      - .vscode/*

# Cancel existing runs on new commits to a branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  INSTALLER_FILE: "install_dba-multitool.sql"
  SAMPLE_DATABASE: "WideWorldImporters"
  SP_DOC_FILE: "WideWorldImporters.md"
  SQLINSTANCE: "localhost"
  DATABASE: "master"

jobs:
  bundle:
    runs-on: ubuntu-latest
    name: Artifacts/Samples
    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2019-latest
        ports:
          - 1433:1433
        env:
          ACCEPT_EULA: "Y"
          SA_PASSWORD: "L0wlydb4"
    env:
      SA_PASSWORD: "L0wlydb4"
      USER: "sa"
    defaults:
      run:
        shell: pwsh

    steps:
      - name: Check out code
        uses: actions/checkout@v3.0.2
        with:
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Install and cache PowerShell modules
        uses: potatoqualitee/psmodulecache@v4.5
        with:
          modules-to-cache: dbatools
          shell: pwsh

      - name: Create bundled installer script
        run: |
          Get-ChildItem -Path $Env:GITHUB_WORKSPACE -Filter "sp_*.sql" | Get-Content | Out-File $Env:INSTALLER_FILE -Encoding ascii
          Get-ChildItem -Path $Env:GITHUB_WORKSPACE -Filter $Env:INSTALLER_FILE | Select-Object -Property Name, Size, LastWriteTime, User

      - name: Commit bundled installer script
        uses: stefanzweifel/git-auto-commit-action@v4.14.1
        with:
          commit_message: Updated bundled installer
          file_pattern: "*.sql"

      - name: Install multitool
        run: |
          $SecPass = ConvertTo-SecureString -String $Env:SA_PASSWORD -AsPlainText -Force
          $sqlCredential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $Env:USER, $SecPass
          foreach ($script in (Get-ChildItem -Path "." -Filter "sp_*.sql").Name) {
            Invoke-DbaQuery -SqlInstance $Env:SQLINSTANCE -SqlCredential $sqlCredential -Database $Env:DATABASE -File $script -EnableException
          }

      - name: Install WideWorldImporters database
        run: |
          $BackupPath = Join-Path -Path $Env:RUNNER_TEMP -ChildPath "$Env:SAMPLE_DATABASE-Full.bak"
          Write-Output "Downloading '$Env:SAMPLE_DATABASE' to $BackupPath"
          $Uri = "https://github.com/Microsoft/sql-server-samples/releases/download/wide-world-importers-v1.0/WideWorldImporters-Full.bak"
          Invoke-WebRequest -Uri $Uri -OutFile $BackupPath
          chmod 777 $BackupPath
          Get-ChildItem -Path $Env:RUNNER_TEMP -Filter "$Env:SAMPLE_DATABASE*"
          Write-Output "Restoring '$Env:SAMPLE_DATABASE' database."
          $SecPass = ConvertTo-SecureString -String $Env:SA_PASSWORD -AsPlainText -Force
          $sqlCredential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $Env:USER, $SecPass
          $restoreQuery = "RESTORE DATABASE [$Env:SAMPLE_DATABASE] FROM DISK = '$BackupPath' WITH RECOVERY;"
          Invoke-DbaQuery -SqlInstance $Env:SQLINSTANCE -SqlCredential $sqlCredential -Query $restoreQuery -Verbose
          #$null = Restore-DbaDatabase -SqlInstance $Env:SQLINSTANCE -SqlCredential $sqlCredential -DatabaseName $Env:DATABASE -Path $BackupPath -WithReplace -EnableException -Verbose

      - name: Generate sp_doc sample
        run: |
          Write-Output "Generating '$Env:SAMPLE_DATABASE' markdown sample."
          $Query = "EXEC sp_doc @DatabaseName = '$Env:SAMPLE_DATABASE';"
          $SecPass = ConvertTo-SecureString -String $Env:SA_PASSWORD -AsPlainText -Force
          $sqlCredential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $Env:USER, $SecPass
          Invoke-DbaQuery -SqlInstance $Env:SQLINSTANCE -SqlCredential $sqlCredential -Database $Env:DATABASE -Query $Query -As SingleValue -EnableException | Out-File $Env:SP_DOC_FILE

      - name: Upload sp_doc sample artifact
        uses: actions/upload-artifact@v3
        with:
          name: sp_doc-sample
          path: ${{ env.SP_DOC_FILE }}
