---
#TODO:
# Add sample sp_doc output as artifact
# See if pester files can be consolidated
# Add SQL 2017 to github runner - https://github.com/potatoqualitee/mssqlsuite/issues/16
# Break out tsqlt action as independent GHA
# azure sql workflow

name: Integration (Win)
on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths-ignore:
      - .vscode/*
  pull_request:
    paths-ignore:
      - .vscode/*

  # Run CI once per day (at 06:00 UTC)
  schedule:
    - cron: "0 6 * * *"

# Cancel existing runs on new commits to a branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  SQLINSTANCE: "localhost"
  DATABASE: "tsqlt"
  INSTALLER_FILE: "install_dba-multitool.sql"
  SAMPLE_DATABASE: "WideWorldImporters"
  NUGET_API: "http://www.nuget.org/api/v2"

jobs:
  integration:
    runs-on: ${{ matrix.os }}
    name: sqlserver-${{ matrix.sql_server }} x ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - windows-2022
        sql_server:
          - 2019

    steps:
      - name: Check out code
        uses: actions/checkout@v3.0.2
        with:
          path: ""

      - name: Install SQL Server
        uses: potatoqualitee/mssqlsuite@v1.4
        with:
          install: sqlengine
          sa-password: L0wlydb4

      - name: Install and cache PowerShell modules
        uses: potatoqualitee/psmodulecache@v4.5
        with:
          modules-to-cache: dbatools
          shell: powershell

      - name: Create database
        run: |
          $null = New-DbaDatabase -SqlInstance $Env:SQLINSTANCE -Database $Env:DATABASE

      - name: Install tSQLt
        uses: ./.github/actions/tsqlt
        with:
          sql-instance: ${{ env.SQLINSTANCE }}
          database: ${{ env.DATABASE }}
          version: "latest"

      - name: Create installer script
        run: |
          Get-ChildItem -Path ".\" -Filter "sp_*.sql" | Get-Content | Out-File $Env:INSTALLER_FILE -Encoding ascii

      - name: Install multitool
        run: |
          Invoke-DbaQuery -SqlInstance $Env:SQLINSTANCE -Database $Env:DATABASE -File $Env:INSTALLER_FILE

      - name: Run Pester tests with SQLCover
        uses: ./.github\actions\sqlcover
        with:
          sql-instance: ${{ env.SQLINSTANCE }}
          database: ${{ env.DATABASE }}

      - name: Produce the coverage report
        uses: insightsengineering/coverage-action@v2
        with:
          path: "cobertura.xml"
          threshold: 90
          fail: false
          publish: true
          diff: true
          diff-branch: main
          diff-storage: _xml_coverage_reports

      - name: Produce sp_doc sample
        run: |
          $Url = "https://github.com/Microsoft/sql-server-samples/releases/download/wide-world-importers-v1.0/WideWorldImporters-Full.bak"
          $BackupPath = Join-Path -Path $Env:RUNNER_TEMP -ChildPath "$Env:SAMPLE_DATABASE-Full.bak"
          $SampleMarkdown = "$Env:SAMPLE_DATABASE.md"

          Write-Output "Generating $Env:SAMPLE_DATABASE markdown sample..."

          # Download and restore WideWorldImporters sample database
          Invoke-WebRequest -Uri $Url -OutFile $BackupPath
          if (Test-Path $BackupPath) { $null = Restore-DbaDatabase -SqlInstance $Env:SQLINSTANCE -DatabaseName $Env:SAMPLE_DATABASE -Path $BackupPath -WithReplace}
          else { Write-Error "$Env:SAMPLE_DATABASE backup failed to download properly." }

          # Generate documentation
          $Query = "EXEC sp_doc @DatabaseName = '$Env:SAMPLE_DATABASE';"
          Invoke-DbaQuery -SqlInstance $Env:SQLINSTANCE -Database $Env:Database -Query $Query -As SingleValue | Out-File $SampleMarkdown

      - name: Create HTML coverage artifact
        uses: actions/upload-artifact@v3
        with:
          name: html-coverage
          path: coverage.html

      - name: Create sample sp_doc artifact
        uses: actions/upload-artifact@v3
        with:
          name: html-coverage
          path: coverage.html

      - uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: Automated Change
          commit_options: "--no-verify --signoff"
          # Optional glob pattern of files which should be added to the commit
          # Defaults to all (.)
          # See the `pathspec`-documentation for git
          # - https://git-scm.com/docs/git-add#Documentation/git-add.txt-ltpathspecgt82308203
          # - https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefpathspecapathspec
          file_pattern: "install_dba-multitool.sql"
          # Optional. Options used by `git-add`.
          # See https://git-scm.com/docs/git-add#_options
          add_options: "-u"
          # Optional. Options used by `git-push`.
          # See https://git-scm.com/docs/git-push#_options
          push_options: "--force"
          skip_dirty_check: true
          skip_fetch: true
          skip_checkout: true
          # Optional. Prevents the shell from expanding filenames.
          # Details: https://www.gnu.org/software/bash/manual/html_node/Filename-Expansion.html
          disable_globbing: true
